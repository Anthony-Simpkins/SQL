.open --new "C:/Users/simpk/OneDrive/Desktop/ECO4444/sql/database/Global_Superstore.db"

CREATE TABLE People
(
Person      Text,
Region      Text,
PRIMARY KEY (Region)
)
;

.import --csv --skip 1 "C:/Users/simpk/OneDrive/Desktop/ECO4444/sql/data/people_global.csv" People

.mode column
.headers on 

SELECT Person, Region
FROM People;

CREATE TABLE Return_amt
(
Returned        Text,
'Order ID'      Text,
Market          Text,
PRIMARY KEY     ('Order ID')
)
;

.import --csv --skip 1 "C:/Users/simpk/OneDrive/Desktop/ECO4444/sql/data/returns_global.csv" return_amt

.tables

DROP TABLE Returned;

.tables

SELECT "Order ID"
FROM Return_Amt
WHERE "Order ID" LIKE '%CA%' ;

CREATE TABLE Orders
(
'Row ID'            Integer ,
'Order ID'          Text ,
'Order Date'        Text ,
'Ship Date'         Text ,
'Ship Mode'         Text ,
'Customer ID'       Text ,
'Customer Name'     Text ,
Segment             Text ,
City                Text ,
'State'             Text ,
Country             Text ,
'Postal Code'       Text ,
Market              Text ,
Region              Text ,
'Product ID'        Text ,
Category            Text ,
'Sub-Category'      Text ,
'Product Name'      Text ,
Sales               Real ,
Quantity            Integer ,
Discount            Real ,
Profit              Real ,
'Shipping Cost'     Real ,
'Order Priority'    Text ,
PRIMARY KEY ('Row ID') ,
FOREIGN KEY (Region) REFERENCES People (Region) ,
FOREIGN KEY ('Order ID') REFERENCES Return_amt ('Order ID'),
FOREIGN KEY (Market) REFERENCES Return_amt (Market)
)
;

.import --csv --skip 1 "C:/Users/simpk/OneDrive/Desktop/ECO4444/sql/data/orders_global.csv" Orders

-- C

-- DETERMINE COUNTRIES AND SALES COUNTS
-- Query to find countries and their sales counts in descending order.

SELECT COUNTRY, SUM(SALES) AS 'Number of Sales'
FROM Orders
GROUP BY COUNTRY
ORDER BY SUM(SALES) DESC;

-- D

-- IDENTIFY COUNTRIES WITH X, Y, OR Z IN THEIR NAMES
-- Modify the previous query to filter countries with X, Y, or Z in their names.

SELECT COUNTRY, SUM(SALES) AS 'Number of Sales'
FROM Orders
WHERE COUNTRY LIKE '%X%' OR COUNTRY LIKE '%Y%' OR COUNTRY LIKE '%Z%'
GROUP BY COUNTRY
ORDER BY SUM(SALES) DESC;

-- E

-- PROFIT CALCULATIONS
-- For filtered countries, calculate total profit and profit per sale, then order by profit per sale.

SELECT COUNTRY, 
       ROUND(SUM(Profit), 2) AS 'Total Profit', 
       ROUND(SUM(Profit)/SUM(Sales), 2) AS 'Profit per Sale'
FROM Orders
WHERE COUNTRY LIKE '%X%' OR COUNTRY LIKE '%Y%' OR COUNTRY LIKE '%Z%'
GROUP BY COUNTRY
ORDER BY SUM(Profit)/SUM(Sales) DESC;

-- F

-- NEGATIVE PROFIT FILTER 
-- Modify the previous query to identify countries with negative total profit or profit per unit.

SELECT COUNTRY, 
       ROUND(SUM(Profit), 2) AS 'Total Profit', 
       ROUND(SUM(Profit)/SUM(Sales), 2) AS 'Profit per Sale'
FROM Orders
WHERE COUNTRY LIKE '%X%' OR COUNTRY LIKE '%Y%' OR COUNTRY LIKE '%Z%'
GROUP BY COUNTRY
HAVING SUM(Profit) < 0 OR SUM(Profit)/SUM(Sales) < 0
ORDER BY SUM(Profit)/SUM(Sales) DESC;

-- G

-- CUSTOMIZED COUNTRY ANALYSIS 
-- Choose two countries of interest and query sales-related metrics for those countries.

SELECT COUNTRY,
       SUM(Quantity) AS 'Units_Sold',
       ROUND(SUM(Sales), 2) AS 'Total_Sales',
       ROUND(SUM(Sales) / SUM(Quantity), 2) AS 'Rev_Per_Unit',
       ROUND(SUM(Profit) / SUM(Quantity), 2) AS 'Profit_Per_Unit'
FROM Orders
WHERE Country = 'El Salvador' OR Country = 'Brazil'
GROUP BY Country;

-- H

-- ANNUAL SALES ANALYSIS 
-- Modify the previous query to report sales metrics on an annual basis.

SELECT Country,
       SUBSTR("Order ID", 4, 4) AS 'Year',
       SUM(Quantity) AS 'Units_Sold',
       ROUND(SUM(Sales), 2) AS 'Total_Sales',
       ROUND(SUM(Sales) / SUM(Quantity), 2) AS 'Rev_Per_Unit',
       ROUND(SUM(Profit) / SUM(Quantity), 2) AS 'Profit_Per_Unit'
FROM Orders
WHERE Country IN ('Brazil', 'El Salvador')
GROUP BY Country, "Year";

-- I

-- MONTHLY SALES ANALYSIS 
-- Modify the annual analysis to report metrics on a monthly basis within each year.

SELECT Country,
       SUBSTR("Order ID", 4, 4) AS 'Year',
       CAST(RTRIM(SUBSTR("Order Date",1,2), '/') AS Integer) AS Month ,
       SUM(Quantity) AS 'Units_Sold',
       ROUND(SUM(Sales), 2) AS 'Total_Sales',
       ROUND(SUM(Sales) / SUM(Quantity), 2) AS 'Rev_Per_Unit',
       ROUND(SUM(Profit) / SUM(Quantity), 2) AS 'Profit_Per_Unit'
FROM Orders
WHERE Country IN ('Brazil', 'El Salvador')
GROUP BY Country, "Year", "Month";

--J

-- REGIONAL SALES 
-- Query to report sales metrics by region over all periods.

SELECT Region,
       SUM(Quantity) AS 'Units_Sold',
       ROUND(SUM(Sales), 2) AS 'Total_Sales',
       ROUND(SUM(Sales) / SUM(Quantity), 2) AS 'Rev_Per_Unit',
       ROUND(SUM(Profit) / SUM(Quantity), 2) AS 'Profit_Per_Unit'
FROM Orders
GROUP BY Region;

-- K

-- ANNUAL REGIONAL SALES 
-- Modify the previous query to report regional sales metrics on an annual basis.

SELECT Region,
       SUBSTR("Order ID", 4, 4) AS 'Year',
       SUM(Quantity) AS 'Units_Sold',
       ROUND(SUM(Sales), 2) AS 'Total_Sales',
       ROUND(SUM(Sales) / SUM(Quantity), 2) AS 'Rev_Per_Unit',
       ROUND(SUM(Profit) / SUM(Quantity), 2) AS 'Profit_Per_Unit'
FROM Orders
GROUP BY Region, "Year";

-- L

-- JOIN ORDERS AND PEOPLE TABLES 
-- Join Orders and People tables to report sales metrics by region and person (regional manager) on an annual basis.

SELECT P.Region,
       P.Person,
       SUBSTR("Order ID", 4, 4) AS 'Year',
       SUM(Quantity) AS 'Units_Sold',
       ROUND(SUM(Sales), 2) AS 'Total_Sales',
       ROUND(SUM(Sales) / SUM(Quantity), 2) AS 'Rev_Per_Unit',
       ROUND(SUM(Profit) / SUM(Quantity), 2) AS 'Profit_Per_Unit'
FROM Orders O Join People P
ON P.Region = O.Region
GROUP BY P.Region, P.Person,"Year";

-- M

-- LOST PROFIT ANALYSIS
-- Join all three tables to determine lost total profit and lost profit per item returned by region and person.
-- Export the results to a CSV file named 'lost_profits_by_region.csv'.

-- This query excluded People with 0 lost profit
SELECT P.Region AS Region,
       P.Person AS Person,
       SUM(O.Profit) AS Lost_Total_Profit,
       ROUND( SUM(O.Profit) / SUM(O.Quantity),2) AS Lost_Profit_Per_Item_Returned
FROM People P
JOIN
    Orders O ON P.Region = O.Region
JOIN
    Return_Amt R ON O.`Order ID` = R.`Order ID`
WHERE R.Returned = 'Yes'
GROUP BY P.Region, P.Person;

-- This query included People with 0 lost profit
-- Exported this one to excel
SELECT P.Region AS Region,
       P.Person AS Person,
       SUM(CASE WHEN R.Returned = 'Yes' THEN O.Profit ELSE 0 END) AS Lost_Total_Profit,
       COALESCE(
        ROUND(
            SUM(CASE WHEN R.Returned = 'Yes' THEN O.Profit ELSE 0 END) /
     NULLIF(SUM(CASE WHEN R.Returned = 'Yes' THEN O.Quantity ELSE 0 END), 0),
            2),0)AS Lost_Profit_Per_Item_Returned
FROM
People P
LEFT JOIN
    Orders O ON P.Region = O.Region
LEFT JOIN
    Return_Amt R ON O.`Order ID` = R.`Order ID`
GROUP BY P.Region, P.Person;

.headers on
.mode csv
.output C:/Users/simpk/OneDrive/Desktop/ECO4444/sql/intermediate_data/lost_profits_by_region.csv

.output stdout
.mode column
.headers on 

-- N

-- ADDITIONAL SQLITE COMMANDS 
-- Provide examples of three additional SQLite commands.

/* Case Statement
   CEILING
   CTE's */
WITH CTE AS(SELECT P.Region AS Region,
       P.Person AS Person,
       CEILING(SUM(CASE WHEN R.Returned = 'Yes' THEN O.Profit ELSE 0 END)) AS Lost_Total_Profit,
       ROUND(
       SUM(CASE WHEN R.Returned = 'Yes' THEN O.Profit ELSE 0 END) /
       SUM(CASE WHEN R.Returned = 'Yes' THEN O.Quantity ELSE 0 END), 2) AS Lost_Profit_Per_Item_Returned
FROM People P
LEFT JOIN
    Orders O ON P.Region = O.Region
LEFT JOIN
    Return_Amt R ON O.`Order ID` = R.`Order ID`
GROUP BY P.Region, P.Person)

SELECT PERSON, Lost_Total_Profit
FROM CTE
WHERE Lost_Total_Profit > 10000
ORDER BY Lost_Total_Profit DESC;

SELECT PERSON, Lost_Total_Profit
FROM CTE
WHERE Lost_Total_Profit > 10000
ORDER BY Lost_Total_Profit DESC;
